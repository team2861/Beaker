Cross-Platform, Multi-Use Motion Profiling and Trajectory Generation.

Pathfinder is a library for generating Motion Profiles, a way to smoothly fit and 
follow a trajectory based upon given waypoints. Currently, both a C and Java API are 
available, but can be applied to almost any application.

An example profile is given below, with the waypoints:

X = -4, Y = -1, Angle = -45 degrees
X = -2, Y = -2, Angle = 0
X = 0, Y = 0, Angle = 0
The Graph on top is the X/Y position, and the Graph on the bottom is the Velocity.


Modifiers
Pathfinder supports Modifiers. Modifiers are a way to manipulate a trajectory with a 
given rule.  Pathfinder supports Tank and Swerve Drive modifiers.


Part of the FIRST Robotics Competition?
Add the following lines to your build.gradle if you're using GradleRIO 
(2018.01.11 or higher):

Java:
dependencies {
    compile pathfinder()
}

If you're not using GradleRIO, do the following:

Java
If you're not using GradleRIO, you must download this manually and copy into 
~/wpilib/user/java/lib: http://dev.imjac.in/maven/jaci/pathfinder/Pathfinder-Java/
1.8/Pathfinder-Java-1.8.jar

You also have to download this, extract it, and place libpathfinder.so into 
~/wpilib/user/java/lib: http://dev.imjac.in/maven/jaci/pathfinder/Pathfinder-JNI/1.8/
Pathfinder-JNI-1.8-athena.zip


Building / Installing on your Architecture
If you want to use Pathfinder on your system, you will have to build the library for 
your platform. You can do this with the following:

./gradlew build
The native libraries will be located under ./Pathfinder-Core/build/libs/pathfinder/ 
(shared and static libs, platform=any64) and ./Pathfinder-Java/build/libs/
pathfinderjava/shared/any64. If you're using native shared (or java), you must put 
these somewhere on your system load path (e.g. Mac/Linux = /usr/local, Windows = 
Somwhere on PATH)

Usage
To see the usage for each language variation of the API, see the README in their folder.

Using the Library
Full examples are provided under examples/

Generating a Trajectory
// 3 Waypoints
Waypoint[] points = new Waypoint[] {
    new Waypoint(-4, -1, Pathfinder.d2r(-45)),      // Waypoint @ x=-4, y=-1, exit angle=-45 degrees
    new Waypoint(-2, -2, 0),                        // Waypoint @ x=-2, y=-2, exit angle=0 radians
    new Waypoint(0, 0, 0)                           // Waypoint @ x=0, y=0,   exit angle=0 radians
};

// Create the Trajectory Configuration
//
// Arguments:
// Fit Method:          HERMITE_CUBIC or HERMITE_QUINTIC
// Sample Count:        SAMPLES_HIGH (100 000)
//                      SAMPLES_LOW  (10 000)
//                      SAMPLES_FAST (1 000)
// Time Step:           0.05 Seconds
// Max Velocity:        1.7 m/s
// Max Acceleration:    2.0 m/s/s
// Max Jerk:            60.0 m/s/s/s
Trajectory.Config config = new Trajectory.Config(Trajectory.FitMethod.HERMITE_CUBIC, Trajectory.Config.SAMPLES_HIGH, 0.05, 1.7, 2.0, 60.0);

// Generate the trajectory
Trajectory trajectory = Pathfinder.generate(points, config);
Using the Trajectory
for (int i = 0; i < trajectory.length(); i++) {
    Trajectory.Segment seg = trajectory.get(i);
    
    System.out.printf("%f,%f,%f,%f,%f,%f,%f,%f\n", 
        seg.dt, seg.x, seg.y, seg.position, seg.velocity, 
            seg.acceleration, seg.jerk, seg.heading);
}
Modifying your Trajectory
Tank Drive
// The distance between the left and right sides of the wheelbase is 0.6m
double wheelbase_width = 0.6;

// Create the Modifier Object
TankModifier modifier = new TankModifier(trajectory);

// Generate the Left and Right trajectories using the original trajectory
// as the centre
modifier.modify(wheelbase_width);

Trajectory left  = modifier.getLeftTrajectory();       // Get the Left Side
Trajectory right = modifier.getRightTrajectory();      // Get the Right Side
Swerve Drive
// The distance between the left and right sides of the wheelbase is 0.6m
double wheelbase_width = 0.6;

// The distance between the front and back sides of the wheelbase is 0.5m
double wheelbase_depth = 0.5;

// The swerve mode to generate will be the 'default' mode, where the 
// robot will constantly be facing forward and 'sliding' sideways to 
// follow a curved path.
SwerveModifier.Mode mode = SwerveModifier.Mode.SWERVE_DEFAULT;

// Create the Modifier Object
SwerveModifier modifier = new SwerveModifier(trajectory);

// Generate the individual wheel trajectories using the original trajectory
// as the centre
modifier.modify(wheelbase_width, wheelbase_depth, mode);

Trajectory fl = modifier.getFrontLeftTrajectory();       // Get the Front Left wheel
Trajectory fr = modifier.getFrontRightTrajectory();      // Get the Front Right wheel
Trajectory bl = modifier.getBackLeftTrajectory();        // Get the Back Left wheel
Trajectory br = modifier.getBackRightTrajectory();       // Get the Back Right wheel

A word on releases
The releases on Maven (mentioned above) are built for the NI RoboRIO (v16/7 2018 image). If you go to the github releases, you can download the 1.5 version for Windows/Linux/Mac releases.

Further reading
If you want to know more about how Pathfinder works, I highly suggest watching the 
seminar on Motion Profiling by FRC Team 254, which inspired and provided a lot of 
guidance for this project. Both use the same generation procedure, with some logistical 
differences.